// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String     @id @default(cuid())
  name     String     @default("")
  email    String     @unique @default("")
  password String?
  cart     CartItem[] @relation("CartItem_user")
  orders   Order[]    @relation("Order_user")
}

model Product {
  id                     String         @id @default(cuid())
  productType            String
  name                   String         @default("")
  make                   String         @default("")
  model                  String         @default("")
  category               String
  instrumentType         String
  instrumentKey          String         @default("")
  boreSize               Float?
  bellSize               Float?
  description            String         @default("")
  photos                 ProductImage[] @relation("ProductImage_product")
  price                  Int
  status                 String         @default("in-stock")
  createdAt              DateTime?      @default(now()) @updatedAt
  from_CartItem_product  CartItem[]     @relation("CartItem_product")
  from_OrderItem_product OrderItem[]    @relation("OrderItem_product")
}

model ProductImage {
  id        String   @id @default(cuid())
  image     Json?
  altText   String   @default("")
  product   Product? @relation("ProductImage_product", fields: [productId], references: [id])
  productId String?  @map("product")

  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

model Order {
  id        String      @id @default(cuid())
  total     Int?
  items     OrderItem[] @relation("OrderItem_order")
  user      User?       @relation("Order_user", fields: [userId], references: [id])
  userId    String?     @map("user")
  charge    String      @default("")
  shipTo    Address?    @relation("Order_shipTo", fields: [shipToId], references: [id])
  shipToId  String?     @map("shipTo")
  billTo    Address?    @relation("Order_billTo", fields: [billToId], references: [id])
  billToId  String?     @map("billTo")
  createdAt DateTime?   @default(now())

  @@index([userId])
  @@index([shipToId])
  @@index([billToId])
}

model OrderItem {
  id        String   @id @default(cuid())
  product   Product? @relation("OrderItem_product", fields: [productId], references: [id])
  productId String?  @map("product")
  quantity  Int?
  order     Order?   @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId   String?  @map("order")

  @@index([productId])
  @@index([orderId])
}

model Address {
  id                String  @id @default(cuid())
  name              String  @default("")
  street            String  @default("")
  street2           String  @default("")
  city              String  @default("")
  state             String  @default("")
  zipCode           String  @default("")
  country           String  @default("")
  from_Order_shipTo Order[] @relation("Order_shipTo")
  from_Order_billTo Order[] @relation("Order_billTo")
}
